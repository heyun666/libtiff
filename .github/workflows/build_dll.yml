name: Build C Library (Multi-OS Robust)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            artifact_name: linux
            lib_ext: "*.so*"
          - os: windows-latest
            build_type: Release
            artifact_name: windows
            lib_ext: "*.dll"
          # 如果需要 macOS 支持，可以添加：
          # - os: macos-latest
          #   build_type: Release
          #   artifact_name: macos
          #   lib_ext: "*.dylib"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Ubuntu Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install Windows Dependencies
      if: matrix.os == 'windows-latest'
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
      shell: pwsh

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS=ON -A x64
        else
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS=ON
        fi
      shell: bash

    - name: Build Project
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --parallel $(nproc)

    - name: Create Output Directory
      run: mkdir -p dist

    - name: Copy Linux Libraries
      if: matrix.os == 'ubuntu-latest'
      run: |
        # 在 build 目录中递归查找 .so 文件
        find build -name "*.so" -o -name "*.so.*" | xargs -I {} cp -v {} dist/
      shell: bash

    - name: Copy Windows Libraries
      if: matrix.os == 'windows-latest'
      run: |
        # 在 Windows 中，dll 文件通常在 Release/ 或 Debug/ 子目录中
        find build -name "*.dll" | xargs -I {} cp -v {} dist/
        # 同时复制相关的 .lib 文件（导入库）
        find build -name "*.lib" | xargs -I {} cp -v {} dist/
      shell: bash

    - name: Verify Artifacts
      run: |
        echo "Generated files:"
        ls -la dist/ || dir dist/
        echo "File details:"
        file dist/* || echo "File command not available"

    - name: Upload Libraries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ matrix.build_type }}-libraries
        path: dist/
        
